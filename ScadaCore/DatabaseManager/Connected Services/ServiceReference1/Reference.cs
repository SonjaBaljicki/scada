//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDatabaseManagerService")]
    public interface IDatabaseManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/Registration", ReplyAction="http://tempuri.org/IDatabaseManagerService/RegistrationResponse")]
        string Registration(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/Registration", ReplyAction="http://tempuri.org/IDatabaseManagerService/RegistrationResponse")]
        System.Threading.Tasks.Task<string> RegistrationAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/Login", ReplyAction="http://tempuri.org/IDatabaseManagerService/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/Login", ReplyAction="http://tempuri.org/IDatabaseManagerService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/LogOut", ReplyAction="http://tempuri.org/IDatabaseManagerService/LogOutResponse")]
        bool LogOut(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/LogOut", ReplyAction="http://tempuri.org/IDatabaseManagerService/LogOutResponse")]
        System.Threading.Tasks.Task<bool> LogOutAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/DatabaseEmpty", ReplyAction="http://tempuri.org/IDatabaseManagerService/DatabaseEmptyResponse")]
        bool DatabaseEmpty();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/DatabaseEmpty", ReplyAction="http://tempuri.org/IDatabaseManagerService/DatabaseEmptyResponse")]
        System.Threading.Tasks.Task<bool> DatabaseEmptyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/StopTagThreads", ReplyAction="http://tempuri.org/IDatabaseManagerService/StopTagThreadsResponse")]
        void StopTagThreads();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/StopTagThreads", ReplyAction="http://tempuri.org/IDatabaseManagerService/StopTagThreadsResponse")]
        System.Threading.Tasks.Task StopTagThreadsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/CheckTagName", ReplyAction="http://tempuri.org/IDatabaseManagerService/CheckTagNameResponse")]
        bool CheckTagName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/CheckTagName", ReplyAction="http://tempuri.org/IDatabaseManagerService/CheckTagNameResponse")]
        System.Threading.Tasks.Task<bool> CheckTagNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddDigitalInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddDigitalInputTagResponse")]
        bool AddDigitalInputTag(string name, string description, string address, int driver, int scanTime, bool scanOn, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddDigitalInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddDigitalInputTagResponse")]
        System.Threading.Tasks.Task<bool> AddDigitalInputTagAsync(string name, string description, string address, int driver, int scanTime, bool scanOn, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogInputTagResponse")]
        bool AddAnalogInputTag(string name, string description, string address, int driver, int scanTime, bool scanOn, int lowLimit, int hightLimit, string units, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogInputTagResponse")]
        System.Threading.Tasks.Task<bool> AddAnalogInputTagAsync(string name, string description, string address, int driver, int scanTime, bool scanOn, int lowLimit, int hightLimit, string units, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddDigitalOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddDigitalOutputTagResponse")]
        bool AddDigitalOutputTag(string name, string description, string address, int initialValue, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddDigitalOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddDigitalOutputTagResponse")]
        System.Threading.Tasks.Task<bool> AddDigitalOutputTagAsync(string name, string description, string address, int initialValue, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogOutputTagResponse")]
        bool AddAnalogOutputTag(string name, string description, string address, int initialValue, int lowLimit, int hightLimit, string units, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogOutputTagResponse")]
        System.Threading.Tasks.Task<bool> AddAnalogOutputTagAsync(string name, string description, string address, int initialValue, int lowLimit, int hightLimit, string units, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogAlarm", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogAlarmResponse")]
        bool AddAnalogAlarm(string tagName, int id, int type, int priority, double edgeValue, string units, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/AddAnalogAlarm", ReplyAction="http://tempuri.org/IDatabaseManagerService/AddAnalogAlarmResponse")]
        System.Threading.Tasks.Task<bool> AddAnalogAlarmAsync(string tagName, int id, int type, int priority, double edgeValue, string units, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/CheckAlarmId", ReplyAction="http://tempuri.org/IDatabaseManagerService/CheckAlarmIdResponse")]
        bool CheckAlarmId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/CheckAlarmId", ReplyAction="http://tempuri.org/IDatabaseManagerService/CheckAlarmIdResponse")]
        System.Threading.Tasks.Task<bool> CheckAlarmIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/TurnOnScan", ReplyAction="http://tempuri.org/IDatabaseManagerService/TurnOnScanResponse")]
        bool TurnOnScan(string name, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/TurnOnScan", ReplyAction="http://tempuri.org/IDatabaseManagerService/TurnOnScanResponse")]
        System.Threading.Tasks.Task<bool> TurnOnScanAsync(string name, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/TurnOffScan", ReplyAction="http://tempuri.org/IDatabaseManagerService/TurnOffScanResponse")]
        bool TurnOffScan(string name, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/TurnOffScan", ReplyAction="http://tempuri.org/IDatabaseManagerService/TurnOffScanResponse")]
        System.Threading.Tasks.Task<bool> TurnOffScanAsync(string name, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveInputTagResponse")]
        bool RemoveInputTag(string name, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveInputTagResponse")]
        System.Threading.Tasks.Task<bool> RemoveInputTagAsync(string name, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveAlarmResponse")]
        bool RemoveAlarm(int id, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveAlarmResponse")]
        System.Threading.Tasks.Task<bool> RemoveAlarmAsync(int id, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveOutputTagResponse")]
        bool RemoveOutputTag(string name, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/RemoveOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/RemoveOutputTagResponse")]
        System.Threading.Tasks.Task<bool> RemoveOutputTagAsync(string name, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/GetDigitalOutputTags", ReplyAction="http://tempuri.org/IDatabaseManagerService/GetDigitalOutputTagsResponse")]
        System.Collections.Generic.Dictionary<string, int> GetDigitalOutputTags(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/GetDigitalOutputTags", ReplyAction="http://tempuri.org/IDatabaseManagerService/GetDigitalOutputTagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetDigitalOutputTagsAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/GetAnalogOutputTags", ReplyAction="http://tempuri.org/IDatabaseManagerService/GetAnalogOutputTagsResponse")]
        System.Collections.Generic.Dictionary<string, int> GetAnalogOutputTags(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/GetAnalogOutputTags", ReplyAction="http://tempuri.org/IDatabaseManagerService/GetAnalogOutputTagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetAnalogOutputTagsAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ChangeValueDigitalOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ChangeValueDigitalOutputTagResponse")]
        bool ChangeValueDigitalOutputTag(string name, int newValue, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ChangeValueDigitalOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ChangeValueDigitalOutputTagResponse")]
        System.Threading.Tasks.Task<bool> ChangeValueDigitalOutputTagAsync(string name, int newValue, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ChangeValueAnalogOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ChangeValueAnalogOutputTagResponse")]
        bool ChangeValueAnalogOutputTag(string name, int newValue, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ChangeValueAnalogOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ChangeValueAnalogOutputTagResponse")]
        System.Threading.Tasks.Task<bool> ChangeValueAnalogOutputTagAsync(string name, int newValue, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ContainsAnalogInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ContainsAnalogInputTagResponse")]
        bool ContainsAnalogInputTag(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ContainsAnalogInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ContainsAnalogInputTagResponse")]
        System.Threading.Tasks.Task<bool> ContainsAnalogInputTagAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ContainsInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ContainsInputTagResponse")]
        bool ContainsInputTag(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ContainsInputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ContainsInputTagResponse")]
        System.Threading.Tasks.Task<bool> ContainsInputTagAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ContainsOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ContainsOutputTagResponse")]
        bool ContainsOutputTag(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ContainsOutputTag", ReplyAction="http://tempuri.org/IDatabaseManagerService/ContainsOutputTagResponse")]
        System.Threading.Tasks.Task<bool> ContainsOutputTagAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ReadFromConfig", ReplyAction="http://tempuri.org/IDatabaseManagerService/ReadFromConfigResponse")]
        void ReadFromConfig();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManagerService/ReadFromConfig", ReplyAction="http://tempuri.org/IDatabaseManagerService/ReadFromConfigResponse")]
        System.Threading.Tasks.Task ReadFromConfigAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerServiceChannel : DatabaseManager.ServiceReference1.IDatabaseManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerServiceClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference1.IDatabaseManagerService>, DatabaseManager.ServiceReference1.IDatabaseManagerService {
        
        public DatabaseManagerServiceClient() {
        }
        
        public DatabaseManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Registration(string username, string password) {
            return base.Channel.Registration(username, password);
        }
        
        public System.Threading.Tasks.Task<string> RegistrationAsync(string username, string password) {
            return base.Channel.RegistrationAsync(username, password);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool LogOut(string token) {
            return base.Channel.LogOut(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync(string token) {
            return base.Channel.LogOutAsync(token);
        }
        
        public bool DatabaseEmpty() {
            return base.Channel.DatabaseEmpty();
        }
        
        public System.Threading.Tasks.Task<bool> DatabaseEmptyAsync() {
            return base.Channel.DatabaseEmptyAsync();
        }
        
        public void StopTagThreads() {
            base.Channel.StopTagThreads();
        }
        
        public System.Threading.Tasks.Task StopTagThreadsAsync() {
            return base.Channel.StopTagThreadsAsync();
        }
        
        public bool CheckTagName(string name) {
            return base.Channel.CheckTagName(name);
        }
        
        public System.Threading.Tasks.Task<bool> CheckTagNameAsync(string name) {
            return base.Channel.CheckTagNameAsync(name);
        }
        
        public bool AddDigitalInputTag(string name, string description, string address, int driver, int scanTime, bool scanOn, string token) {
            return base.Channel.AddDigitalInputTag(name, description, address, driver, scanTime, scanOn, token);
        }
        
        public System.Threading.Tasks.Task<bool> AddDigitalInputTagAsync(string name, string description, string address, int driver, int scanTime, bool scanOn, string token) {
            return base.Channel.AddDigitalInputTagAsync(name, description, address, driver, scanTime, scanOn, token);
        }
        
        public bool AddAnalogInputTag(string name, string description, string address, int driver, int scanTime, bool scanOn, int lowLimit, int hightLimit, string units, string token) {
            return base.Channel.AddAnalogInputTag(name, description, address, driver, scanTime, scanOn, lowLimit, hightLimit, units, token);
        }
        
        public System.Threading.Tasks.Task<bool> AddAnalogInputTagAsync(string name, string description, string address, int driver, int scanTime, bool scanOn, int lowLimit, int hightLimit, string units, string token) {
            return base.Channel.AddAnalogInputTagAsync(name, description, address, driver, scanTime, scanOn, lowLimit, hightLimit, units, token);
        }
        
        public bool AddDigitalOutputTag(string name, string description, string address, int initialValue, string token) {
            return base.Channel.AddDigitalOutputTag(name, description, address, initialValue, token);
        }
        
        public System.Threading.Tasks.Task<bool> AddDigitalOutputTagAsync(string name, string description, string address, int initialValue, string token) {
            return base.Channel.AddDigitalOutputTagAsync(name, description, address, initialValue, token);
        }
        
        public bool AddAnalogOutputTag(string name, string description, string address, int initialValue, int lowLimit, int hightLimit, string units, string token) {
            return base.Channel.AddAnalogOutputTag(name, description, address, initialValue, lowLimit, hightLimit, units, token);
        }
        
        public System.Threading.Tasks.Task<bool> AddAnalogOutputTagAsync(string name, string description, string address, int initialValue, int lowLimit, int hightLimit, string units, string token) {
            return base.Channel.AddAnalogOutputTagAsync(name, description, address, initialValue, lowLimit, hightLimit, units, token);
        }
        
        public bool AddAnalogAlarm(string tagName, int id, int type, int priority, double edgeValue, string units, string token) {
            return base.Channel.AddAnalogAlarm(tagName, id, type, priority, edgeValue, units, token);
        }
        
        public System.Threading.Tasks.Task<bool> AddAnalogAlarmAsync(string tagName, int id, int type, int priority, double edgeValue, string units, string token) {
            return base.Channel.AddAnalogAlarmAsync(tagName, id, type, priority, edgeValue, units, token);
        }
        
        public bool CheckAlarmId(int id) {
            return base.Channel.CheckAlarmId(id);
        }
        
        public System.Threading.Tasks.Task<bool> CheckAlarmIdAsync(int id) {
            return base.Channel.CheckAlarmIdAsync(id);
        }
        
        public bool TurnOnScan(string name, string token) {
            return base.Channel.TurnOnScan(name, token);
        }
        
        public System.Threading.Tasks.Task<bool> TurnOnScanAsync(string name, string token) {
            return base.Channel.TurnOnScanAsync(name, token);
        }
        
        public bool TurnOffScan(string name, string token) {
            return base.Channel.TurnOffScan(name, token);
        }
        
        public System.Threading.Tasks.Task<bool> TurnOffScanAsync(string name, string token) {
            return base.Channel.TurnOffScanAsync(name, token);
        }
        
        public bool RemoveInputTag(string name, string token) {
            return base.Channel.RemoveInputTag(name, token);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveInputTagAsync(string name, string token) {
            return base.Channel.RemoveInputTagAsync(name, token);
        }
        
        public bool RemoveAlarm(int id, string token) {
            return base.Channel.RemoveAlarm(id, token);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAlarmAsync(int id, string token) {
            return base.Channel.RemoveAlarmAsync(id, token);
        }
        
        public bool RemoveOutputTag(string name, string token) {
            return base.Channel.RemoveOutputTag(name, token);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOutputTagAsync(string name, string token) {
            return base.Channel.RemoveOutputTagAsync(name, token);
        }
        
        public System.Collections.Generic.Dictionary<string, int> GetDigitalOutputTags(string token) {
            return base.Channel.GetDigitalOutputTags(token);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetDigitalOutputTagsAsync(string token) {
            return base.Channel.GetDigitalOutputTagsAsync(token);
        }
        
        public System.Collections.Generic.Dictionary<string, int> GetAnalogOutputTags(string token) {
            return base.Channel.GetAnalogOutputTags(token);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetAnalogOutputTagsAsync(string token) {
            return base.Channel.GetAnalogOutputTagsAsync(token);
        }
        
        public bool ChangeValueDigitalOutputTag(string name, int newValue, string token) {
            return base.Channel.ChangeValueDigitalOutputTag(name, newValue, token);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeValueDigitalOutputTagAsync(string name, int newValue, string token) {
            return base.Channel.ChangeValueDigitalOutputTagAsync(name, newValue, token);
        }
        
        public bool ChangeValueAnalogOutputTag(string name, int newValue, string token) {
            return base.Channel.ChangeValueAnalogOutputTag(name, newValue, token);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeValueAnalogOutputTagAsync(string name, int newValue, string token) {
            return base.Channel.ChangeValueAnalogOutputTagAsync(name, newValue, token);
        }
        
        public bool ContainsAnalogInputTag(string name) {
            return base.Channel.ContainsAnalogInputTag(name);
        }
        
        public System.Threading.Tasks.Task<bool> ContainsAnalogInputTagAsync(string name) {
            return base.Channel.ContainsAnalogInputTagAsync(name);
        }
        
        public bool ContainsInputTag(string name) {
            return base.Channel.ContainsInputTag(name);
        }
        
        public System.Threading.Tasks.Task<bool> ContainsInputTagAsync(string name) {
            return base.Channel.ContainsInputTagAsync(name);
        }
        
        public bool ContainsOutputTag(string name) {
            return base.Channel.ContainsOutputTag(name);
        }
        
        public System.Threading.Tasks.Task<bool> ContainsOutputTagAsync(string name) {
            return base.Channel.ContainsOutputTagAsync(name);
        }
        
        public void ReadFromConfig() {
            base.Channel.ReadFromConfig();
        }
        
        public System.Threading.Tasks.Task ReadFromConfigAsync() {
            return base.Channel.ReadFromConfigAsync();
        }
    }
}
